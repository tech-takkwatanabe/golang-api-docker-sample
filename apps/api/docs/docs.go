// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/loggedin/logout": {
            "post": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "アクセストークンのCookieを削除します",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "ログアウト",
                "responses": {
                    "200": {
                        "description": "ログアウト成功",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/loggedin/refresh": {
            "post": {
                "security": [
                    {
                        "Sub": []
                    }
                ],
                "description": "リフレッシュトークンを使用して新しいアクセストークンを生成して返します",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "トークンリフレッシュ",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenRefreshResponse"
                        }
                    },
                    "400": {
                        "description": "リフレッシュトークンエラー",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "認証エラー",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/loggedin/user": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "トークンを元にログイン中のユーザー情報を返す",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "現在のユーザー情報",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserDTOResponse"
                        }
                    },
                    "401": {
                        "description": "認証エラー",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "メールアドレスとパスワードでログインし、JWT トークンを返します",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "ログイン",
                "parameters": [
                    {
                        "description": "ログイン情報",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ログイン成功時のレスポンス",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "バリデーションエラー",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "認証エラー",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "新しいユーザーを登録します",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "新規ユーザー登録",
                "parameters": [
                    {
                        "description": "登録情報",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "登録成功時のレスポンス",
                        "schema": {
                            "$ref": "#/definitions/dto.UserDTOResponse"
                        }
                    },
                    "400": {
                        "description": "バリデーションエラー",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.LoginInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "controllers.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserSubDTO"
                }
            }
        },
        "dto.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.TokenRefreshResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                }
            }
        },
        "dto.UserDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "@description 作成日時（RFC3339形式）\n@example \"2024-03-21T12:34:56.789Z\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/vo.DateTime"
                        }
                    ]
                },
                "email": {
                    "description": "@description メールアドレス\n@example \"user@example.com\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/vo.Email"
                        }
                    ]
                },
                "id": {
                    "description": "@description ユーザーID\n@example 1",
                    "type": "integer"
                },
                "name": {
                    "description": "@description ユーザー名\n@example \"山田太郎\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/vo.Name"
                        }
                    ]
                },
                "updated_at": {
                    "description": "@description 更新日時（RFC3339形式）\n@example \"2024-03-21T12:34:56.789Z\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/vo.DateTime"
                        }
                    ]
                },
                "uuid": {
                    "description": "@description ユーザーUUID\n@example \"550e8400-e29b-41d4-a716-446655440000\"",
                    "type": "string"
                }
            }
        },
        "dto.UserDTOResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserDTO"
                }
            }
        },
        "dto.UserSubDTO": {
            "type": "object",
            "properties": {
                "sub": {
                    "type": "string"
                }
            }
        },
        "vo.DateTime": {
            "type": "object"
        },
        "vo.Email": {
            "type": "object"
        },
        "vo.Name": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWTトークンをAuthorizationヘッダーに含めてください",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Go Auth API",
	Description:      "Gin + JWT 認証API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
