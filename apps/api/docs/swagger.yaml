definitions:
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/dto.UserSubDTO'
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.TokenRefreshResponse:
    properties:
      accessToken:
        type: string
    type: object
  dto.UserDTO:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/vo.DateTime'
        description: |-
          @description 作成日時（RFC3339形式）
          @example "2024-03-21T12:34:56.789Z"
      email:
        allOf:
        - $ref: '#/definitions/vo.Email'
        description: |-
          @description メールアドレス
          @example "user@example.com"
      id:
        description: |-
          @description ユーザーID
          @example 1
        type: integer
      name:
        allOf:
        - $ref: '#/definitions/vo.Name'
        description: |-
          @description ユーザー名
          @example "山田太郎"
      updated_at:
        allOf:
        - $ref: '#/definitions/vo.DateTime'
        description: |-
          @description 更新日時（RFC3339形式）
          @example "2024-03-21T12:34:56.789Z"
      uuid:
        description: |-
          @description ユーザーUUID
          @example "550e8400-e29b-41d4-a716-446655440000"
        type: string
    type: object
  dto.UserDTOResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserDTO'
    type: object
  dto.UserSubDTO:
    properties:
      sub:
        type: string
    type: object
  vo.DateTime:
    type: object
  vo.Email:
    type: object
  vo.Name:
    type: object
info:
  contact: {}
  description: Gin + JWT 認証API
  title: Go Auth API
  version: "1.0"
paths:
  /loggedin/logout:
    post:
      description: アクセストークンのCookieを削除します
      produces:
      - application/json
      responses:
        "200":
          description: ログアウト成功
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      security:
      - AccessToken: []
      summary: ログアウト
      tags:
      - auth
  /loggedin/refresh:
    post:
      description: リフレッシュトークンを使用して新しいアクセストークンを生成して返します
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenRefreshResponse'
        "400":
          description: リフレッシュトークンエラー
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - RefreshToken: []
      summary: トークンリフレッシュ
      tags:
      - auth
  /loggedin/user:
    get:
      description: トークンを元にログイン中のユーザー情報を返す
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDTOResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AccessToken: []
      summary: 現在のユーザー情報
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: メールアドレスとパスワードでログインし、JWT トークンを返します
      parameters:
      - description: ログイン情報
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: ログイン成功時のレスポンス
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: バリデーションエラー
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: ログイン
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: 新しいユーザーを登録します
      parameters:
      - description: 登録情報
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: 登録成功時のレスポンス
          schema:
            $ref: '#/definitions/dto.UserDTOResponse'
        "400":
          description: バリデーションエラー
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: 新規ユーザー登録
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: JWTトークンをAuthorizationヘッダーに含めてください
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
