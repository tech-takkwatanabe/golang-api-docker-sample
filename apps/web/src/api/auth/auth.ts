/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Go Auth API
 * Gin + JWT Ë™çË®ºAPI
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ControllersLoginInput,
  ControllersRegisterInput,
  DtoErrorResponse,
  DtoTokenResponse,
  DtoUserDTOResponse,
} from '.././models';

import { customInstance } from '.././mutator/custom-instance';

/**
 * „Éà„Éº„ÇØ„É≥„ÇíÂÖÉ„Å´„É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíËøî„Åô
 * @summary ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
 */
export const getLoggedinUser = (signal?: AbortSignal) => {
  return customInstance<DtoUserDTOResponse>({
    url: `/loggedin/user`,
    method: 'GET',
    signal,
  });
};

export const getGetLoggedinUserQueryKey = () => {
  return [`/loggedin/user`] as const;
};

export const getGetLoggedinUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLoggedinUser>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoggedinUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLoggedinUser>>> = ({
    signal,
  }) => getLoggedinUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLoggedinUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLoggedinUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLoggedinUser>>
>;
export type GetLoggedinUserQueryError = DtoErrorResponse;

export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLoggedinUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLoggedinUser>>,
          TError,
          Awaited<ReturnType<typeof getLoggedinUser>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLoggedinUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLoggedinUser>>,
          TError,
          Awaited<ReturnType<typeof getLoggedinUser>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLoggedinUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
 */

export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLoggedinUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLoggedinUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„Åß„É≠„Ç∞„Ç§„É≥„Åó„ÄÅJWT „Éà„Éº„ÇØ„É≥„ÇíËøî„Åó„Åæ„Åô
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const postLogin = (
  controllersLoginInput: ControllersLoginInput,
  signal?: AbortSignal,
) => {
  return customInstance<DtoTokenResponse>({
    url: `/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: controllersLoginInput,
    signal,
  });
};

export const getPostLoginMutationOptions = <
  TError = DtoErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: ControllersLoginInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: ControllersLoginInput },
  TContext
> => {
  const mutationKey = ['postLogin'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: ControllersLoginInput }
  > = (props) => {
    const { data } = props ?? {};

    return postLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;
export type PostLoginMutationBody = ControllersLoginInput;
export type PostLoginMutationError = DtoErrorResponse;

/**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const usePostLogin = <TError = DtoErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLogin>>,
      TError,
      { data: ControllersLoginInput },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: ControllersLoginInput },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„ÇíÁôªÈå≤„Åó„Åæ„Åô
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const postRegister = (
  controllersRegisterInput: ControllersRegisterInput,
  signal?: AbortSignal,
) => {
  return customInstance<DtoUserDTOResponse>({
    url: `/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: controllersRegisterInput,
    signal,
  });
};

export const getPostRegisterMutationOptions = <
  TError = DtoErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegister>>,
    TError,
    { data: ControllersRegisterInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: ControllersRegisterInput },
  TContext
> => {
  const mutationKey = ['postRegister'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRegister>>,
    { data: ControllersRegisterInput }
  > = (props) => {
    const { data } = props ?? {};

    return postRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRegister>>
>;
export type PostRegisterMutationBody = ControllersRegisterInput;
export type PostRegisterMutationError = DtoErrorResponse;

/**
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const usePostRegister = <TError = DtoErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postRegister>>,
      TError,
      { data: ControllersRegisterInput },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: ControllersRegisterInput },
  TContext
> => {
  const mutationOptions = getPostRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
