/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Go Auth API
 * Gin + JWT Ë™çË®ºAPI
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ControllersLoginInput,
  ControllersRegisterInput,
  DtoErrorResponse,
  DtoLoginResponse,
  DtoMessageResponse,
  DtoTokenRefreshResponse,
  DtoUserDTOResponse,
} from '.././models';

import { customInstance } from '.././mutator/custom-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * „Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÅÆCookie„ÇíÂâäÈô§„Åó„Åæ„Åô
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const postLoggedinLogout = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DtoMessageResponse>(
    { url: `/loggedin/logout`, method: 'POST', signal },
    options
  );
};

export const getPostLoggedinLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoggedinLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof postLoggedinLogout>>, TError, void, TContext> => {
  const mutationKey = ['postLoggedinLogout'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLoggedinLogout>>, void> = () => {
    return postLoggedinLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoggedinLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLoggedinLogout>>
>;

export type PostLoggedinLogoutMutationError = unknown;

/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const usePostLoggedinLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLoggedinLogout>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof postLoggedinLogout>>, TError, void, TContext> => {
  const mutationOptions = getPostLoggedinLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * „É™„Éï„É¨„ÉÉ„Ç∑„É•„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®„Åó„Å¶Êñ∞„Åó„ÅÑ„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÇíÁîüÊàê„Åó„Å¶Ëøî„Åó„Åæ„Åô
 * @summary „Éà„Éº„ÇØ„É≥„É™„Éï„É¨„ÉÉ„Ç∑„É•
 */
export const postLoggedinRefresh = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DtoTokenRefreshResponse>(
    { url: `/loggedin/refresh`, method: 'POST', signal },
    options
  );
};

export const getPostLoggedinRefreshMutationOptions = <
  TError = DtoErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoggedinRefresh>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof postLoggedinRefresh>>, TError, void, TContext> => {
  const mutationKey = ['postLoggedinRefresh'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLoggedinRefresh>>,
    void
  > = () => {
    return postLoggedinRefresh(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoggedinRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLoggedinRefresh>>
>;

export type PostLoggedinRefreshMutationError = DtoErrorResponse;

/**
 * @summary „Éà„Éº„ÇØ„É≥„É™„Éï„É¨„ÉÉ„Ç∑„É•
 */
export const usePostLoggedinRefresh = <TError = DtoErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLoggedinRefresh>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof postLoggedinRefresh>>, TError, void, TContext> => {
  const mutationOptions = getPostLoggedinRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * „Éà„Éº„ÇØ„É≥„ÇíÂÖÉ„Å´„É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíËøî„Åô
 * @summary ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
 */
export const getLoggedinUser = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DtoUserDTOResponse>(
    { url: `/loggedin/user`, method: 'GET', signal },
    options
  );
};

export const getGetLoggedinUserQueryKey = () => {
  return [`/loggedin/user`] as const;
};

export const getGetLoggedinUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedinUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoggedinUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLoggedinUser>>> = ({ signal }) =>
    getLoggedinUser(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLoggedinUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLoggedinUserQueryResult = NonNullable<Awaited<ReturnType<typeof getLoggedinUser>>>;
export type GetLoggedinUserQueryError = DtoErrorResponse;

export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedinUser>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLoggedinUser>>,
          TError,
          Awaited<ReturnType<typeof getLoggedinUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedinUser>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLoggedinUser>>,
          TError,
          Awaited<ReturnType<typeof getLoggedinUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedinUser>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
 */

export function useGetLoggedinUser<
  TData = Awaited<ReturnType<typeof getLoggedinUser>>,
  TError = DtoErrorResponse,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedinUser>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetLoggedinUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„Åß„É≠„Ç∞„Ç§„É≥„Åó„ÄÅJWT „Éà„Éº„ÇØ„É≥„ÇíËøî„Åó„Åæ„Åô
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const postLogin = (
  controllersLoginInput: ControllersLoginInput,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DtoLoginResponse>(
    {
      url: `/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: controllersLoginInput,
      signal,
    },
    options
  );
};

export const getPostLoginMutationOptions = <
  TError = DtoErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: ControllersLoginInput },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: ControllersLoginInput },
  TContext
> => {
  const mutationKey = ['postLogin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: ControllersLoginInput }
  > = (props) => {
    const { data } = props ?? {};

    return postLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>;
export type PostLoginMutationBody = ControllersLoginInput;
export type PostLoginMutationError = DtoErrorResponse;

/**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const usePostLogin = <TError = DtoErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLogin>>,
      TError,
      { data: ControllersLoginInput },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: ControllersLoginInput },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„ÇíÁôªÈå≤„Åó„Åæ„Åô
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const postRegister = (
  controllersRegisterInput: ControllersRegisterInput,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DtoUserDTOResponse>(
    {
      url: `/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: controllersRegisterInput,
      signal,
    },
    options
  );
};

export const getPostRegisterMutationOptions = <
  TError = DtoErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegister>>,
    TError,
    { data: ControllersRegisterInput },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: ControllersRegisterInput },
  TContext
> => {
  const mutationKey = ['postRegister'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRegister>>,
    { data: ControllersRegisterInput }
  > = (props) => {
    const { data } = props ?? {};

    return postRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postRegister>>>;
export type PostRegisterMutationBody = ControllersRegisterInput;
export type PostRegisterMutationError = DtoErrorResponse;

/**
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const usePostRegister = <TError = DtoErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postRegister>>,
      TError,
      { data: ControllersRegisterInput },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: ControllersRegisterInput },
  TContext
> => {
  const mutationOptions = getPostRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
